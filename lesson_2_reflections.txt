What happens when you initialize a repository? Why do you need it?

When you initialize a repository, the computer adds a folder called .git to the current
directory. This needs to be done in order to save versions of the current directory using Git.

How is the staging area different from the working directory and the repository? What value do
you think it offers?

The staging area is a sort of temporary location where files from the working directory that
are to be committed are added to in preparation to a commit on the repository. It's valuable
because it gives us the ability to specifically choose which files we want to commit.

How can you use the staging area to make sure you have one commit per logical change?

I can use the staging area to make sure I am only committing the files that I want to commit
per logical change. First I only add the specific files I want to the staging area, then I
check the differences between the working directory and the staging area, and the staging area
and the master head to ensure that I am only making the changes appropriate to the logical
change. Then I commit the changes from the staging area to the repository.

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

Branches are helpful when we want to experiment with the program without affecting the master
branch. It's helpful when trying out new ideas or working on multiple new features at the same
time.

How do the diagrams help you visualize the branch structure?

Drawing out the branch structure into a diagram helps me immediately see how the branch structure
works. The arrows help me see that each commit points back to the previous commit, so each commit
is a parent of the commit directly in front of it. It also helped explain the meaning of being in
a detached head state. Drawing it out showed me that repositories are sort of like linked-lists or
branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way
we do?

Merging two branches combines the two branches together essentially making them into a single branch
starting at a new commit. The new commit points back to all of the commits in both of the previous
branches and that is why we represented the process in the diagram as a new commit with arrows
pointing back to the previous branches.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

The biggest pro of automatic merges is that it saves me a lot of time and effort that can go into
other things. The big con is that Git can't think on its own so sometimes when there are conflicts
automatic merging won't work, but Git allows us to manually look into the changes and fix any
conflicts when this happens so there isn't any good reason to always merge manually on my own.